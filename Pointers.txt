Pointer is a variable whose value is an address.

Declaring Pointers - 

int *int_ptr;
double *double_ptr;
char *char_ptr;
string *string_ptr;


Initializing Pointers - 

int *int_ptr {};
double *double_ptr {nullptr};
char *char_ptr {nullptr};
string *string_ptr {nullptr};

& - Address operator
 
int num {10};
cout<<num;  //10
cout<<sizeof(num); //4
cout<<&num; //0x61ff1c - address


int *p;
cout<<"Value of p"<<p; //0x61ff60 - garbage
cout<<"Address of p"<<&p; //0x61ff18
cout<<"Sizeof p"<<sizeof(p); //4
p = nullptr;
cout<<"Value of p:"<<p; //0


All pointers in a program has same size regardless of the datatype it is pointing.

int *p1;
double *p2;
unsigned long long *p3;
vector<string> *p4;
string *p5;

cout<<sizeof(p1); //4
cout<<sizeof(p2); //4
cout<<sizeof(p3); //4
cout<<sizeof(p4); //4
cout<<sizeof(p5); //4

Pointers can change
Pointers can be null
Pointers can be uninitialized


int score {100};
int *score_ptr {&score};

cout<<*score_ptr; //100

*score_ptr = 200;
cout<<*score_ptr; //200
cout<<score; //200

double high_temp {100.7};
double low_temp {37.4};

double *temp_ptr {&high_temp};

cout<<*temp_ptr; //100.7

temp_ptr = &low_temp;

cout<<*temp_ptr; //37.4


string name {"Frank"}
string *string_ptr {&name};
cout<<*string_ptr; //Frank

name = "James";
cout<<*string_ptr; //James


vector<string> stooges {"Larry","Moe","Curly"};
vector<string> *vector_ptr {nullptr};

vector_ptr = &stooges;

for(auto stooge:*vector_ptr){
	cout<<stooge<<" "; 
}

 
Main use case of pointer - Dynamic memory Allocation

new - allocate storage
delete - deallocate storage
new[] - allocate storage for array
delete[] - deallocate storage for an array
 

int scores[] {100,95,89};

cout<<scores; //0x61fec8
cout<<*scores; //100


int *score_ptr {scores};

cout<<score_ptr; //0x61fec8
cout<<*score_ptr; //100


int scores[] {100,95,89};

int *score_ptr {scores};
cout<<score_ptr[0]; //100
cout<<score_ptr[1]; //95
cout<<score_ptr[2]; //89


int scores[] {100,95,89};
int *score_ptr {scores};

cout<<score_ptr; //0x61ff10
cout<<(score_ptr+1); //0x61ff14
cout<<(score_ptr+2); //0x61ff18

 
int scores[] {100,95,89};

int *score_ptr {scores};

cout<<*score_ptr; //100
cout<<*(score_ptr+1); //95
cout<<*(score_ptr+2); //89


Pointer Arithmetic - 

int_ptr++ - Increments a pointer to point to the next array element.
int_ptr-- - Decrements a pointer to point to the previous array element.
int_ptr += n
int_ptr -= n

int n = int_ptr2 - int_ptr1; //Determines the number of elements between the pointer.

== , != :

Determine if two pointers point to the same location, and it does not compare the data where they point.

string s1 {"Frank"};
string s2 {"Frank"};

string *p1 {&s1};
string *p2 {&s2};
string *p3 {&s1};

cout<<(p1 == p2)<<endl; //false
cout<<(p1 == p3)<<endl; //true

cout<<(*p1 == *p2)<<endl; //true
cout<<(*p1 == *p3)<<endl; //true


Pointers to Constants:

The data pointed to by the pointers is constant and cannot be changed.
The pointer itself can change and point somewhere else.

int high_score {100};
int low_score {100};

const int *score_ptr {&high_score};

*score_ptr = 86; //ERROR
score_ptr = &low_score; //OK


Constant pointers:

The data pointed to by the pointer can be changed
The pointer itself cannot change and point somewhere else

int high_score {100};
int low_score {65};

int *const score_ptr {&high_score};

*score_ptr = 86;  //OK

score_ptr = &low_score; //ERROR


Constant pointers to constants:

The data pointed tp by the pointer is constant and cannot be changed.
The pointer itself cannot change and point somewhere else.

int high_score {100};
int low_score {65};
const int *const score_ptr {&high_score};

*score_ptr = 86; //ERROR
score_ptr = &low_score; //ERROR



Passing pointers to a function:

void double_data(int *int_ptr){
	*int_ptr *= 2;
}

int main(){
   int value {10};
   cout<<value<<endl; //10
   double_data(&value);
   cout<<value<<endl; //20
}


Returning a pointer:

int *largest_int(int *int_ptr1,int *int_ptr2){
    if(*int_ptr1 > *int_ptr2){
         return int_ptr1;
    }
    else{
        return int_ptr2;
    }
}

int main(){
    int a{100};
    int b{200};

    int *largest_ptr {nullptr};
    largest_ptr = largest_int(&a,&b);
    cout<<*largest_ptr<<endl; //200
    return 0;
}


Returning dynamically allocated memory:

int *create_storage(size_t size,int init_value = 0){
    int *new_storage {nullptr};
    new_storage = new int[size];
    for(size_t i{0};i<size;i++){
       *(new_storage + i) = init_value;
    }
    return new_storage;
}

int main(){
    int *my_array;
    my_array = create_array(100,20);
    delete [] my_array;
    return 0;
}


Never return a pointer of local variable declared within a function:


int *dont_do_this(){
    int size {};
    return &size;
}

int *or_this(){
    int size {};
    int *int_ptr {&size};
    return int_ptr;
}


Reverse an array using pointers:

void reverse_array(int* arr, int size) {
    int *start = arr;
    int *end = arr + size - 1;
    while (start < end) {
        // swap elements pointed to by start and end pointers
        int temp = *start;
        *start = *end;
        *end = temp;
        
        // Move the pointers towards the center
        start++;
        end--;
    }
}


Reverse a string using pointers:

#include <string>

std::string reverse_string(const std::string& str) {
    std::string reversed;

    const char* start = str.c_str();                    // Pointer to the first character
    const char* end = str.c_str() + str.size() - 1;     // Pointer to the last character

    while (end >= start) {
        reversed.push_back(*end);   // Append the character at the end pointer to the reversed string
        end--;
    }

    return reversed;
}


Uninitialized Pointers:

int *int_ptr; //pointing anywhere - Garbage

*int_ptr = 100; // Hopefully a crash

Dangling Pointer:

Pointer that is pointing to released memory.
For example, 2 pointers point to the same data
1 pointer releases the data with delete.
The other pointer accesses the release data.

The pointer that points to memory that is invalid is called dangling pointer.

Leaking memory is most common problem of pointers when you forget to release allocated memory with delete.


Reference:

An Alias for a variable.
Must be intialized to a variable when declared.
Cannot be null.
Once initialized cannot be made to refer to a different variable.


Using references in range-based loop

vector<string>stooges {"Larry","Moe","Curly"};

for(auto str:stooges){
   str = "Funny"; //changes the copy
}

for(auto str:stooges){
    cout<<str<<endl; //Larry, Moe, Curly
}


for(auto &str: stooges){
    str = "Funny";  //Changes the actual
}

for(auto str:stooges){
    cout<<str<<endl; //Funny, Funny, Funny
}

for(auto const &str:stooges){
    str = "Funny"; //Compiler Error
}


int num {100};
int &ref{num};

cout<<num<<endl;
cout<<ref<<endl;

num = 200;
cout<<num<<endl; //200
cout<<ref<<endl; //200

ref = 300;

cout<<num<<endl; //300
cout<<ref<<endl; //300

L - values:

values that have names and are addressable
modifiable if they are not constants

int x {100}
x = 1000;
x = 1000+20;

//x is an l-value

R - values:

values that are not l-value.
They are non-addressable and non-assignable

int x {100}; //100 is an r-value
int y = x+200; // (x+200) is an r-value


int x {100};

int &ref1 = x; //ref1 is reference to l-value
ref1 = 1000;

int &ref2 = 100; //Error 100 is a r-value



int square(int &n){
    return n*n;
}

int num{10};
square(num); //OK
square(5); //Error - can't reference r-value 5
